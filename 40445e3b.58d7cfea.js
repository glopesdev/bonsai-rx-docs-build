(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=b(n),s=r,f=u["".concat(o,".").concat(s)]||u[s]||m[s]||i;return n?a.a.createElement(f,l(l({ref:t},c),{},{components:n})):a.a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),i=(n(0),n(116)),o={id:"function_generator",title:"FunctionGenerator"},l={unversionedId:"fundamentals/dsp/function_generator",id:"fundamentals/dsp/function_generator",isDocsHomePage:!1,title:"FunctionGenerator",description:"Prerequisites:",source:"@site/docs/fundamentals/dsp/function_generator.md",slug:"/fundamentals/dsp/function_generator",permalink:"/docs/fundamentals/dsp/function_generator",editUrl:"https://github.com/spewil/bonsai-rx-docs/edit/master/website/docs/fundamentals/dsp/function_generator.md",version:"current",sidebar:"docs",previous:{title:"DigitalOutput",permalink:"/docs/fundamentals/daqmx/digital_output"},next:{title:"MatrixWriter",permalink:"/docs/fundamentals/dsp/matrix_writer"}},p=[],c={rightToc:p};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Prerequisites"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"bonsai Dsp Library")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Category"),": Source"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Brief"),": Generates signal waveform following any of a set of common periodic functions."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input")," - Accepts several input types (integer, string, tuple, array)"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Properties"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Amplitude"),"(",Object(i.b)("em",{parentName:"li"},"double"),") - the amplitude of the signal waveform in either direction from zero, e.g. a value of ",Object(i.b)("inlineCode",{parentName:"li"},"1")," produces a waveform in range ",Object(i.b)("inlineCode",{parentName:"li"},"[-1,1]")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BufferLength")," (",Object(i.b)("em",{parentName:"li"},"int"),") - the number of samples in each output buffer"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(i.b)("em",{parentName:"li"},"System.Nullable","<","OpenCV.Net.Depth",">"),") - target bit depth of individual buffer elements (optional, choose from ",Object(i.b)("inlineCode",{parentName:"li"},"U8"),", ",Object(i.b)("inlineCode",{parentName:"li"},"S8"),", ",Object(i.b)("inlineCode",{parentName:"li"},"U16"),", ",Object(i.b)("inlineCode",{parentName:"li"},"S16"),", ",Object(i.b)("inlineCode",{parentName:"li"},"S32"),", ",Object(i.b)("inlineCode",{parentName:"li"},"F32"),", ",Object(i.b)("inlineCode",{parentName:"li"},"F64"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Frequency")," (",Object(i.b)("em",{parentName:"li"},"double"),") - frequency of the signal waveform in Hz"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Offset")," (",Object(i.b)("em",{parentName:"li"},"double"),") - DC offset of the signal waveform (optional)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Phase")," (",Object(i.b)("em",{parentName:"li"},"double"),") - phase offset of the signal waveform in radians (optional)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"SampleRate")," (",Object(i.b)("em",{parentName:"li"},"int"),") - the number of samples generated in Hz"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Waveform")," (",Object(i.b)("em",{parentName:"li"},"Bonsai.Dsp.FunctionWaveform"),") - the periodic waveform used to sample the signal, choose from ",Object(i.b)("inlineCode",{parentName:"li"},"Sine"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Square"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Triangular"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Sawtooth"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Output")," (",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),") - a ",Object(i.b)("inlineCode",{parentName:"p"},"1 x N")," array where ",Object(i.b)("inlineCode",{parentName:"p"},"N")," is ",Object(i.b)("inlineCode",{parentName:"p"},"BufferLength")),Object(i.b)("hr",null),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Tip"),": To limit the waveform to positive values, use equal values for ",Object(i.b)("inlineCode",{parentName:"p"},"Amplitude")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Offset")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Tip"),": To produce a rectangular waveform with variable duty cycles, use ",Object(i.b)("inlineCode",{parentName:"p"},"Sawtooth")," waveform type, followed by a ",Object(i.b)("inlineCode",{parentName:"p"},"Threshold")," (Dsp) node"))}b.isMDXComponent=!0}}]);