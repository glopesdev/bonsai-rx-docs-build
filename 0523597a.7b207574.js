(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},O=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,b=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),O=i,d=m["".concat(b,".").concat(O)]||m[O]||u[O]||r;return n?a.a.createElement(d,l(l({ref:t},p),{},{components:n})):a.a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,b=new Array(r);b[0]=O;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,b[1]=l;for(var p=2;p<r;p++)b[p]=n[p];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return c}));var i=n(3),a=n(7),r=(n(0),n(116)),b={id:"video_writer",title:"VideoWriter"},l={unversionedId:"fundamentals/video/video_writer",id:"fundamentals/video/video_writer",isDocsHomePage:!1,title:"VideoWriter",description:"Prerequisites:",source:"@site/docs/fundamentals/video/video_writer.md",slug:"/fundamentals/video/video_writer",permalink:"/bonsai-rx-docs-build/docs/fundamentals/video/video_writer",editUrl:"https://github.com/glopesdev/bonsai-rx-docs-build/edit/master/website/docs/fundamentals/video/video_writer.md",version:"current",sidebar:"docs",previous:{title:"CameraCapture",permalink:"/bonsai-rx-docs-build/docs/fundamentals/video/camera_capture"},next:{title:"Writing Documentation",permalink:"/bonsai-rx-docs-build/docs/meta/writing_docs"}},o=[],p={rightToc:o};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Prerequisites"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"bonsai Vision Library")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Category"),": Sink"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Brief"),": Writes the input image sequence to a compressed ",Object(r.b)("inlineCode",{parentName:"p"},".avi")," file"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Input")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),") - 2D matrix of pixels, such as that produced by ",Object(r.b)("inlineCode",{parentName:"p"},"CameraCapture")," or the ",Object(r.b)("inlineCode",{parentName:"p"},"Image")," output of other camera source nodes"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Properties"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Buffered")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether writing should be buffered"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FileName")," (",Object(r.b)("em",{parentName:"li"},"string"),") - name of the output file or full path to the output file if the desired path is different from the current working directory"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FourCC")," (",Object(r.b)("em",{parentName:"li"},"string"),") - the four-character code of the codec used to compress video frames, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"FMP4")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FrameRate")," (",Object(r.b)("em",{parentName:"li"},"double"),") - playback frame rate of the image sequence"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FrameSize")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Size"),") - frame size in the output file",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether the output file should be overwritten if it already exists"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ResizeInterpolation")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.SubPixelInterpolation"),") - interpolation method used to resize video frames, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"NearestNeighbor")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Suffix")," (",Object(r.b)("em",{parentName:"li"},"Bonsai.IO.PathSuffix"),") - optional suffix used to generate file names: ",Object(r.b)("inlineCode",{parentName:"li"},"None"),", ",Object(r.b)("inlineCode",{parentName:"li"},"FileCount"),", ",Object(r.b)("inlineCode",{parentName:"li"},"Timestamp"),"; generates new files even if ",Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," is set to True")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Output")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),"):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(r.b)("em",{parentName:"li"},"bool"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Size")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net"),".",Object(r.b)("em",{parentName:"li"},"IpIDepth"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"WidthStep")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ImageData")," (",Object(r.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ChannelOfInterest")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"RegionOfInterest")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Rect"),")",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"X")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Y")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(r.b)("em",{parentName:"li"},"bool"),")")),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Tip"),": How to get real-time playback rate? Without a hardware trigger, the acquisition frame rate might be unstable. If the playback seems vastly different from real-time, one can place ",Object(r.b)("inlineCode",{parentName:"p"},"TimeInterval")," after ",Object(r.b)("inlineCode",{parentName:"p"},"VideoWriter")," to measure the real frame rate and then specify the corresponding frequency in the ",Object(r.b)("inlineCode",{parentName:"p"},"FrameRate")," property of ",Object(r.b)("inlineCode",{parentName:"p"},"VideoWriter"),"."),Object(r.b)("p",null,"With a hardware trigger, one can set the ",Object(r.b)("inlineCode",{parentName:"p"},"FrameRate")," property of ",Object(r.b)("inlineCode",{parentName:"p"},"VideoWriter")," equal to the (known) trigger frequency."),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Common errors"),":"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Runtime Error: A valid file path must be specified"),"\nOccurs when the ",Object(r.b)("inlineCode",{parentName:"p"},"FileName")," property is left empty or not specified properly"))}c.isMDXComponent=!0}}]);