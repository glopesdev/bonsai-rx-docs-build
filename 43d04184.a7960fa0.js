(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),c=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,b=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),u=c(n),s=r,d=u["".concat(b,".").concat(s)]||u[s]||m[s]||i;return n?a.a.createElement(d,l(l({ref:t},o),{},{components:n})):a.a.createElement(d,l({ref:t},o))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,b=new Array(i);b[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,b[1]=l;for(var o=2;o<i;o++)b[o]=n[o];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return c}));var r=n(3),a=n(7),i=(n(0),n(116)),b={id:"matrix_writer",title:"MatrixWriter"},l={unversionedId:"fundamentals/dsp/matrix_writer",id:"fundamentals/dsp/matrix_writer",isDocsHomePage:!1,title:"MatrixWriter",description:"Prerequisites:",source:"@site/docs/fundamentals/dsp/matrix_writer.md",slug:"/fundamentals/dsp/matrix_writer",permalink:"/bonsai-rx-docs-build/docs/fundamentals/dsp/matrix_writer",editUrl:"https://github.com/glopesdev/bonsai-rx-docs-build/edit/master/website/docs/fundamentals/dsp/matrix_writer.md",version:"current",sidebar:"docs",previous:{title:"FunctionGenerator",permalink:"/bonsai-rx-docs-build/docs/fundamentals/dsp/function_generator"},next:{title:"CsvWriter",permalink:"/bonsai-rx-docs-build/docs/fundamentals/io/csv_writer"}},p=[],o={rightToc:p};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Prerequisites"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"bonsai Dsp Library")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Category"),": Sink"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Brief"),": Writes the incoming signal into the specified raw binary output stream"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input")," (",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),") - an array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Properties"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Layout"),"(",Object(i.b)("em",{parentName:"li"},"Bonsai.Dsp.MatrixLayout"),") - controls how individual buffer matrices are linearised into disk; when input is a ",Object(i.b)("inlineCode",{parentName:"li"},"C x N")," array (where ",Object(i.b)("inlineCode",{parentName:"li"},"C")," is number of channels and ",Object(i.b)("inlineCode",{parentName:"li"},"N")," is number of samples in buffer), as is the case in almost all bonsai data sources, the appropriate layout is ",Object(i.b)("inlineCode",{parentName:"li"},"ColumnMajor")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Path")," (",Object(i.b)("em",{parentName:"li"},"string"),") - name of the output file or full path to the output file if the desired path is different from the current"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Suffix")," (",Object(i.b)("em",{parentName:"li"},"Bonsai.IO.PathSuffix"),") - optional suffix used to generate file names: ",Object(i.b)("inlineCode",{parentName:"li"},"None"),", ",Object(i.b)("inlineCode",{parentName:"li"},"FileCount"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Timestamp"),"; generates new files even if ",Object(i.b)("inlineCode",{parentName:"li"},"Overwrite")," is set to True "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Overwrite")," (",Object(i.b)("em",{parentName:"li"},"bool"),") - indicates whether the output file should be overwritten if it already exists")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Output")," (",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),") - the same array"),Object(i.b)("hr",null),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Tip"),": To read a ",Object(i.b)("inlineCode",{parentName:"p"},".bin")," file (written with ",Object(i.b)("inlineCode",{parentName:"p"},"ColumnMajor")," layout) in Python, one can use ",Object(i.b)("inlineCode",{parentName:"p"},"numpy.fromfile(path, dtype).reshape(-1,C)")," where ",Object(i.b)("inlineCode",{parentName:"p"},"C")," is the number of input channels.\n",Object(i.b)("inlineCode",{parentName:"p"},"dtype")," depends on the input signal ",Object(i.b)("inlineCode",{parentName:"p"},"Depth")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"depth"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"dtype"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"U8"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.uint8"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"S8"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.int8"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"U16"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.uint16"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"S16"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.int16"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"S32"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.int32"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"F32"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.single")," or ",Object(i.b)("inlineCode",{parentName:"td"},"np.float32"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"F64"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"np.double")," or ",Object(i.b)("inlineCode",{parentName:"td"},"np.float64"))))),Object(i.b)("hr",null),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Common errors"),":"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Runtime Error: Input array must have the same element type"),"\nElement type may refer to the ",Object(i.b)("inlineCode",{parentName:"p"},"Depth")," parameter of input signals (e.g. in ",Object(i.b)("inlineCode",{parentName:"p"},"FunctionGenerator"),"). It must be the same for all input signals fed into a given writer node."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Runtime Error: Input array must have the same shape except in the dimension corresponding to axis"),"\nHappens when input arrays have different shapes, possibly due to unequal ",Object(i.b)("inlineCode",{parentName:"p"},"BufferSize")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Runtime Error: A valid file path must be specified"),"\nOccurs when the ",Object(i.b)("inlineCode",{parentName:"p"},"Path")," property is left empty or not specified properly"))}c.isMDXComponent=!0}}]);