(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),c=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},s=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=b(e,["components","mdxType","originalType","parentName"]),m=c(n),s=a,d=m["".concat(l,".").concat(s)]||m[s]||u[s]||r;return n?i.a.createElement(d,o(o({ref:t},p),{},{components:n})):i.a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=s;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return c}));var a=n(3),i=n(7),r=(n(0),n(116)),l={id:"analog_output",title:"AnalogOutput"},o={unversionedId:"fundamentals/daqmx/analog_output",id:"fundamentals/daqmx/analog_output",isDocsHomePage:!1,title:"AnalogOutput",description:"Prerequisites:",source:"@site/docs/fundamentals/daqmx/analog_output.md",slug:"/fundamentals/daqmx/analog_output",permalink:"/docs/fundamentals/daqmx/analog_output",editUrl:"https://github.com/spewil/bonsai-rx-docs/edit/master/website/docs/fundamentals/daqmx/analog_output.md",version:"current",sidebar:"docs",previous:{title:"AnalogInput",permalink:"/docs/fundamentals/daqmx/analog_input"},next:{title:"DigitalOutput",permalink:"/docs/fundamentals/daqmx/digital_output"}},b=[],p={rightToc:b};function c(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Prerequisites"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"bonsai DAQmx Library"),Object(r.b)("li",{parentName:"ul"},"NI DAQmx driver from the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.ni.com/en-gb/support/downloads/drivers/download.ni-daqmx.html#348669"}),"NI website"))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Category"),": Sink"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Brief"),": Writes a sequence of sample buffer to one or more DAQmx analog output channels"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Input")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),") - ",Object(r.b)("inlineCode",{parentName:"p"},"C x N")," array where ",Object(r.b)("inlineCode",{parentName:"p"},"C")," is the number of connected analog output channels and ",Object(r.b)("inlineCode",{parentName:"p"},"N")," is the buffer size"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Properties"),": "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ActiveEdge"),"(",Object(r.b)("em",{parentName:"li"},"NationalInstruments.DAQmx.SampleClockActiveEdge"),") - the edges (",Object(r.b)("inlineCode",{parentName:"li"},"Rising")," or ",Object(r.b)("inlineCode",{parentName:"li"},"Falling"),") of the NI-DAQmx device's sample clock signal used for signal generation"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"BufferSize")," (",Object(r.b)("em",{parentName:"li"},"int"),") - the number of samples to generate for a single hardware buffer; it should be matched to the buffer size of the input nodes that define the analog output signal; the upper limit of the buffer (FIFO - 'first-in, first-out') depends on the DAQ board; it should be matched with"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(r.b)("em",{parentName:"li"},"System.Collections.ObjectModel.Collection","<","Bonsai.DAQmx.AnalogOutputChannelConfiguration",">"),") - all analog output channels that the voltage signal will be fed to, specified by adding channels in the ",Object(r.b)("inlineCode",{parentName:"li"},"AnalogOutputChannelConfiguration Collection Editor")," and setting its parameters as appropriate:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"PhysicalChannel")," - the physical analog output channel on the board, selected from the drop-down list once the device is connected"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ChannelName")," - can be anything"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MaximumValue")," - maximum voltage value expected in the signal, not to be confused with device range"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MinimumValue")," - minimum voltage value expected in the signal, analogous to ",Object(r.b)("inlineCode",{parentName:"li"},"MaximumValue")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"VoltageUnits")," - the units used to generate a voltage signal to the channel; for more information about the options (",Object(r.b)("inlineCode",{parentName:"li"},"Volts")," or ",Object(r.b)("inlineCode",{parentName:"li"},"FromCustomScale"),"), see the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://zone.ni.com/reference/en-XX/help/370471AM-01/mxcprop/attr1184/"}),"NI website")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"SampleMode")," (",Object(r.b)("em",{parentName:"li"},"NationalInstruments.DAQmx.SampleQuantityMode"),") - specifies whether samples are generated until the task is stopped (",Object(r.b)("inlineCode",{parentName:"li"},"SampleContinuous"),") or a specific number of samples, set by ",Object(r.b)("inlineCode",{parentName:"li"},"BufferSize"),", is reached (",Object(r.b)("inlineCode",{parentName:"li"},"FiniteSamples"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"SampleRate")," (",Object(r.b)("em",{parentName:"li"},"double"),") - the number of samples generated per second; the upper limit depends of the DAQ board"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"SignalSource")," (",Object(r.b)("em",{parentName:"li"},"string"),") - source terminal of the clock; if not specified, the internal clock of the device will be used")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Output")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),"): "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(r.b)("em",{parentName:"li"},"bool"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Size")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Rows")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Cols")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Step")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Depth"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ElementSize")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Data")," (",Object(r.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(r.b)("em",{parentName:"li"},"bool"),")")),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Tip"),": produce arbitrary input signals using ",Object(r.b)("inlineCode",{parentName:"p"},"FunctionGenerator")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Tip"),": independent signals of ",Object(r.b)("inlineCode",{parentName:"p"},"OpenCV.Net.Mat")," type (",Object(r.b)("inlineCode",{parentName:"p"},"1 x N")," arrays) can be merged using ",Object(r.b)("inlineCode",{parentName:"p"},"Zip")," --\x3e ",Object(r.b)("inlineCode",{parentName:"p"},"Concat")," (","#","Dsp)"),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Common errors"),":"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Runtime Error: Device cannot be accessed"),"\nMost likely happens because the NI-DAQmx device is not connected/powered. Several other possible reasons and remedies are listed in the bonsai error message."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Runtime Error: Requested value is not a supported value for this property. The property value may be invalid because it conflicts with another property."),"\nWith some NI-DAQmx boards (e.g. USB-6341), this is caused by the workflow containing multiple ",Object(r.b)("inlineCode",{parentName:"p"},"AnalogOutput")," nodes. Having to use a single ",Object(r.b)("inlineCode",{parentName:"p"},"AnalogOutput")," node means that the channel non-specific parameters (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"SampleMode"),") will be the same for all channels. "))}c.isMDXComponent=!0}}]);